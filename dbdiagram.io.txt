// Subscription Tiers (reference data, synced from Clerk)
Table subscription_tiers {
  id uuid [primary key, default: `gen_random_uuid()`]
  clerk_product_id varchar(255) [unique, not null]
  name varchar(100) [not null]
  price_monthly decimal(10,2) [not null]
  price_yearly decimal(10,2)
  storage_limit_gb integer [not null]
  max_clients integer // null means unlimited
  max_projects integer // null means unlimited
  features jsonb // store additional features as JSON
  is_active boolean [default: true]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

// Owners (Main Account Holders)
Table owners {
  id uuid [primary key, default: `gen_random_uuid()`]
  clerk_id varchar(255) [unique, not null]
  email varchar(255) [unique, not null]
  full_name varchar(255) [not null]
  company_name varchar(255)
  avatar_url text
  subscription_tier_id uuid [ref: > subscription_tiers.id] // nullable, no default
  subscription_status varchar(50) [default: 'pending'] // pending until first webhook
  trial_ends_at timestamp
  subscription_start_date timestamp
  subscription_end_date timestamp
  current_period_start timestamp
  current_period_end timestamp
  storage_used_gb decimal(10,2) [default: 0]
  client_count integer [default: 0]
  project_count integer [default: 0]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  last_login_at timestamp
}

// Team Members (optional - if owners want to add team members)
Table team_members {
  id uuid [primary key, default: `gen_random_uuid()`]
  owner_id uuid [ref: > owners.id, not null]
  clerk_id varchar(255) [unique, not null]
  email varchar(255) [not null]
  full_name varchar(255) [not null]
  role varchar(50) [default: 'member'] // admin, member, viewer
  avatar_url text
  permissions jsonb // granular permissions
  is_active boolean [default: true]
  invited_at timestamp [default: `now()`]
  accepted_at timestamp
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  last_login_at timestamp
  
  indexes {
    (owner_id, email) [unique]
  }
}

// Clients
Table clients {
  id uuid [primary key, default: `gen_random_uuid()`]
  owner_id uuid [ref: > owners.id, not null]
  clerk_id varchar(255) [unique, not null]
  email varchar(255) [not null]
  full_name varchar(255) [not null]
  company_name varchar(255)
  phone varchar(50)
  avatar_url text
  notes text
  is_active boolean [default: true]
  invited_at timestamp [default: `now()`]
  accepted_at timestamp
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  last_login_at timestamp
  
  indexes {
    (owner_id, email) [unique]
  }
}

// Projects
Table projects {
  id uuid [primary key, default: `gen_random_uuid()`]
  owner_id uuid [ref: > owners.id, not null]
  client_id uuid [ref: > clients.id, not null]
  name varchar(255) [not null]
  description text
  status varchar(50) [default: 'active'] // active, on_hold, completed, archived
  start_date date
  due_date date
  completed_at timestamp
  storage_used_gb decimal(10,2) [default: 0]
  color varchar(7) // hex color for UI
  created_by uuid [ref: > owners.id]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  archived_at timestamp
  
  indexes {
    owner_id
    client_id
    status
  }
}

// Project Members (team members or clients who can access specific projects)
Table project_members {
  id uuid [primary key, default: `gen_random_uuid()`]
  project_id uuid [ref: > projects.id, not null]
  user_id uuid [not null] // can be team_member_id or client_id
  user_type varchar(20) [not null] // 'team_member' or 'client'
  role varchar(50) [default: 'viewer'] // admin, editor, commenter, viewer
  added_at timestamp [default: `now()`]
  added_by uuid
  
  indexes {
    (project_id, user_id, user_type) [unique]
    project_id
  }
}

// Documents
Table documents {
  id uuid [primary key, default: `gen_random_uuid()`]
  project_id uuid [ref: > projects.id, not null]
  owner_id uuid [ref: > owners.id, not null]
  parent_document_id uuid [ref: > documents.id] // for folder structure
  name varchar(255) [not null]
  description text
  file_path text [not null] // Supabase storage path
  file_size_bytes bigint [not null]
  file_type varchar(100)
  mime_type varchar(255)
  version integer [default: 1]
  is_folder boolean [default: false]
  is_latest_version boolean [default: true]
  uploaded_by uuid [not null] // can be owner, team member, or client
  uploaded_by_type varchar(20) [not null] // 'owner', 'team_member', 'client'
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  deleted_at timestamp
  
  indexes {
    project_id
    parent_document_id
    (project_id, name)
    is_latest_version
  }
}

// Document Versions (track all versions)
Table document_versions {
  id uuid [primary key, default: `gen_random_uuid()`]
  document_id uuid [ref: > documents.id, not null]
  version integer [not null]
  file_path text [not null] // Supabase storage path for this version
  file_size_bytes bigint [not null]
  change_notes text
  uploaded_by uuid [not null]
  uploaded_by_type varchar(20) [not null] // 'owner', 'team_member', 'client'
  created_at timestamp [default: `now()`]
  
  indexes {
    document_id
    (document_id, version) [unique]
  }
}

// Comments
Table comments {
  id uuid [primary key, default: `gen_random_uuid()`]
  document_id uuid [ref: > documents.id, not null]
  parent_comment_id uuid [ref: > comments.id] // for threaded comments
  content text [not null]
  author_id uuid [not null]
  author_type varchar(20) [not null] // 'owner', 'team_member', 'client'
  is_edited boolean [default: false]
  is_resolved boolean [default: false]
  resolved_by uuid
  resolved_at timestamp
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  deleted_at timestamp
  
  indexes {
    document_id
    parent_comment_id
    author_id
    is_resolved
  }
}

// Comment Mentions (for @mentions in comments)
Table comment_mentions {
  id uuid [primary key, default: `gen_random_uuid()`]
  comment_id uuid [ref: > comments.id, not null]
  mentioned_user_id uuid [not null]
  mentioned_user_type varchar(20) [not null] // 'owner', 'team_member', 'client'
  is_read boolean [default: false]
  read_at timestamp
  created_at timestamp [default: `now()`]
  
  indexes {
    comment_id
    (mentioned_user_id, is_read)
  }
}

// Notifications
Table notifications {
  id uuid [primary key, default: `gen_random_uuid()`]
  recipient_id uuid [not null]
  recipient_type varchar(20) [not null] // 'owner', 'team_member', 'client'
  type varchar(50) [not null] // 'comment', 'mention', 'document_upload', 'project_invite', etc.
  title varchar(255) [not null]
  message text
  link_url text
  related_entity_id uuid // could be comment_id, document_id, project_id
  related_entity_type varchar(50)
  is_read boolean [default: false]
  read_at timestamp
  created_at timestamp [default: `now()`]
  
  indexes {
    (recipient_id, is_read)
    created_at
  }
}

// Activity Log (audit trail)
Table activity_logs {
  id uuid [primary key, default: `gen_random_uuid()`]
  owner_id uuid [ref: > owners.id, not null]
  project_id uuid [ref: > projects.id]
  document_id uuid [ref: > documents.id]
  actor_id uuid [not null]
  actor_type varchar(20) [not null] // 'owner', 'team_member', 'client'
  action varchar(100) [not null] // 'document_uploaded', 'comment_added', 'project_created', etc.
  description text
  metadata jsonb // store additional context
  ip_address inet
  user_agent text
  created_at timestamp [default: `now()`]
  
  indexes {
    owner_id
    project_id
    document_id
    actor_id
    created_at
  }
}

// Storage Usage Tracking (for monitoring limits)
Table storage_usage_snapshots {
  id uuid [primary key, default: `gen_random_uuid()`]
  owner_id uuid [ref: > owners.id, not null]
  storage_used_gb decimal(10,2) [not null]
  document_count integer
  project_count integer
  client_count integer
  snapshot_date date [not null]
  created_at timestamp [default: `now()`]
  
  indexes {
    (owner_id, snapshot_date) [unique]
    snapshot_date
  }
}

// Webhooks Log (track Clerk webhook events)
Table webhook_events {
  id uuid [primary key, default: `gen_random_uuid()`]
  event_type varchar(100) [not null]
  clerk_event_id varchar(255) [unique]
  payload jsonb [not null]
  processed boolean [default: false]
  processed_at timestamp
  error_message text
  created_at timestamp [default: `now()`]
  
  indexes {
    event_type
    processed
    created_at
  }
}